'''
Предложить структуру хранения данных и технологию их обработки для проекта интернет-магазина (упрощённо).
В магазине тысячи товаров различного предназначения, брендов и т.д.
В интернет-магазине необходимо предусмотреть систему скидок. Виды скидок:
• Скидка на единичный товар
• Скидка на бренд
• Скидка на группу товаров (группы: предназначение(техника, одежда,...), пол)
• Скидка клиента
Скидка имеет начало и конец действия. У каждого товара в
определённый момент может быть ни одной/одна/несколько скидок. Скидка в данный момент рассчитывается
как максимум из действующих скидок для товара. Скидку клиента учитывать в процессе покупки товара,
при отображении каталога товаров цены с учётом скидки клиента не пересчитывать. Остальные скидки при отображении
каталога должны быть показаны. Необходимо, чтобы была возможность сортировки товаров по актуальной цене - с учётом скидок.
• Какие django-приложения для решения задачи предлагаете использовать (готовые движки магазинов не предлагать)?
'''

'''
Скидка клиента хранится отдельно в таблице с его данными и применяется при расчете корзины.

Таблица скидок на товары, категории пол и прочее состоит из 5 столбцов:

1. ID Категории, Брэнда, товара, пола и прочих данных (уникальный)
2. срок начала скидки (не может быть пустой)
3. Срок окончания скидки (не может быть пустой)
4. размер  скидки
5. ID записи

При обновлении данных вьюхи забирают отсюда актуальный статус скидки по id (действует, если дата - в диапазоне установленных) 
из таблицы по нужному ID и выводят его в категории, карточке товара.

Применимый максимум сверяется со скидкой клиента в корзине, применяется нужный.

Что касается вопроса про "Какие django-приложения для решения задачи предлагаете использовать", 
то я ранее не видел необходимости прибегать к сторонним приложениям, т.к. в моделях можно определить 
самую частую сортировку как стандартную, а  методы 'order_by' & 'filter' могут работать на сохраненном кверисете 
без повторного обращения к базе, поэтому за юзерскую сессию можно многократно переиспользовать кверисет, полученный при 
первом запросе пользователя.
'''


'''
This text for commit which will be deleted after
'''